(define (install-polynomial-package)
;; internal procedures
  ;; representation of poly
  (define (make-poly variable term-list) (cons variable term-list))
  (define (variable p) (car p))
  (define (term-list p) (cdr p))
  ;; exercise 2.89
  (define (make-poly-dense variable dense-term-list) (cons variable dense-term-list))
  (define (variable-dense p) (car p))
  (define (term-list-dense p) (cdr p))
  (define (the-empty-termlist-dense) '())
  (define (first-term-dense term-list) (car term-list))
  (define (rest-terms-dense term-list) (cdr term-list))
  (define (empty-termlist?-dense term-list) (null? term-list))
  (define (make-term-dense order coeff) (list order coeff))
  (define (order-dense term) (car term))
  (define (coeff-dense term) (cadr term))
  (define (=zero?-p-dense p)
    (cond ((null? (term-list-dense p) #t))
	   ((= 0 (first-term-dense p) (=zero?-p-dense (rest-terms-dense p))))
	   (else #f)))

  
  ;; exercise 2.87
  (define (=zero?-p p)
    (cond ((null? (term-list p)) #t)
	  (else #f)))
  (define (=zero? x)
    (= 0 x))
  (define (adjoin-term term term-list)
    (if (=zero? (coeff term))
	term-list
	(cons term term-list)))
  (define (the-empty-termlist) '())
  (define (first-term term-list) (car term-list))
  (define (rest-terms term-list) (cdr term-list))
  (define (empty-termlist? term-list) (null? term-list))
  (define (make-term order coeff) (list order coeff))
  (define (order term) (car term))
  (define (coeff term) (cadr term))
  ;; representation of terms and term lists
  (define (add-poly p1 p2)
    (if (same-variable? (variable p1) (variable p2))
	(make-poly (variable p1)
		   (add-terms (term-list p1) (term-list p2)))
	(error "Polys not in same var: ADD-POLY" (list p1 p2))))
  (define (mul-poly p1 p2)
    (if (same-variable? (variable p1) (variable p2))
	(make-poly (variable p1)
		   (mul-terms (term-list p1) (term-list p2)))
	(error "Polys not in same var: MUL-POLY" (list p1 p2))))
  (define (add-terms L1 L2)
    (cond ((empty-termlist? L1) L2)
	  ((empty-termlist? L2) L1)
	  (else
	   (let ((t1 (first-term L1))
		 (t2 (first-term L2)))
	     (cond ((> (order t1) (order t2))
		    (adjoin-term
		     t1 (add-terms (rest-terms L1) L2)))
		   ((< (order t1) (order t2))
		    (adjoin-term
		     t2 (add-terms L1 (rest-terms L2))))
		   (else
		    (adjoin-term
		     (make-term (order t1)
				(add (coeff t1) (coeff t2)))
		     (add-terms (rest-terms L1)
				(rest-terms L2))))))))) 
  ;; exercise 2.88
  (define (sub-terms L1 L2)
    (cond ((empty-termlist? L1) (negate-term L2))
	  ((empty-termlist? L2) L1)
	  (else
	   (let ((t1 (first-term L1))
		 (t2 (first-term L2)))
	     (cond ((> (order t1) (order t2))
		    (adjoin-term t1
				 (sub-terms (rest-terms L1) L2)))
		   ((< (order t1) (order t2))
		    (adjoin-term t2 (sub-terms L1 (rest-terms L2))))
		   (else (adjoin-term (make-term (order t1)
						 (sub (coeff t1) (coeff t2)))
				      (sub-terms (rest-terms L1)
						 (rest-terms L2))))
		   )))))
  ;; exercise 2.88 
  (define (negate-term L1)
    (cond ((empty-termlist? L1) the-empty-termlist)
	  (else (adjoin-term
		 (make-term (order (first-term L1))
			    (- (coeff (first-term L1))))
		 (negate-term (rest-terms L1))))))
  (define (mul-terms L1 L2)
    (if (empty-termlist? L1)
	(the-empty-termlist)
	(add-terms (mul-term-by-all-terms (first-term L1) L2)
		   (mul-terms (rest-terms L1) L2))))
  (define (mul-term-by-all-terms t1 L)
    (if (empty-termlist? L)
	(the-empty-termlist)
	(let ((t2 (first-term L)))
	  (adjoin-term
	   (make-term (+ (order t1) (order t2))
		      (mul (coeff t1) (coeff t2)))
	   (mul-term-by-all-terms t1 (rest-terms L))))))
  ;; interface to rest of the system
  (define (tag p) (attach-tag 'polynomial p))
  (put 'add '(polynomial polynomial)
       (lambda (p1 p2) (tag (add-poly p1 p2))))
  (put 'mul '(polynomial polynomial)
       (lambda (p1 p2) (tag (mul-poly p1 p2))))
  (put 'make 'polynomial
       (lambda (var terms) (tag (make-poly var terms))))
  (put '=zero? '(polynomial) =zero?-p)
  'done)
(define (make-polynomial-sparse var terms)
  ((get 'make 'polynomial) var terms))
(install-polynomial-package)
